@page "/report"
@inject NavigationManager Navigation
@using System.Globalization;
@using SimurgWeb.Services
@using SimurgWeb.SimurgModels
@inject IJSRuntime JS
@inject ReportService _reportService;

<h3 class="mb-4">Rapor Sayfası</h3>

<div class="d-flex gap-2 mb-3">
    <button class="@GetButtonClass(true)" @onclick="ShowProjectReport">Proje Bazlı</button>
    <button class="@GetButtonClass(false)" @onclick="ShowMonthlyReport">Ay Bazlı</button>
</div>

@if (isProjectReportActive)
{
    <div class="card p-4">
        <div class="d-flex align-items-center gap-2">
            @* <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id">@customer.CustomerName</option>
                }
            </select> *@

            <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id" selected="@(customer.Id == selectedCustomer ? "selected" : null)">
                        @customer.CustomerName
                    </option>
                }
            </select>

            <select class="form-control" @bind="selectedProject">
                <option value="">Proje Seçin</option>
                @foreach (var project in Projects)
                {
                    <option value="@project.Id">@project.ProjectName</option>
                }
            </select>

            @* <div class="form-check form-check-inline">
                <input type="radio" id="all" name="checkType" class="form-check-input" checked value="0" @onchange="SetIncomeExpense">
                <label for="checkType" class="form-check-label">Tümü</label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" id="income" name="checkType" class="form-check-input" value="1" @onchange="SetIncomeExpense">
                <label for="checkType" class="form-check-label">Gelir</label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" name="checkType" id="expense" class="form-check-input" value="2" @onchange="SetIncomeExpense">
                <label for="checkType" class="form-check-label">Gider</label>
            </div> *@

            <button class="btn btn-success" @onclick="LoadProjectData">Raporla</button>
        </div>

        <div class="mt-4">
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Müşteri</th>
                        <th>Proje</th>
                        <th>Gelir</th>
                        <th>Gelir Tutar</th>
                        <th>Gider</th>
                        <th>Gider Tutar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var report in ProjectReports)
                    {
                        <tr>
                            <td>@report.Customer</td>
                            <td>@report.Project</td>
                            <td>@(report.IsIncome ? "Gelir" : "")</td>
                            <td>@(report.IsIncome ? $"{report.Amount:N2} ₺" : "")</td>
                            <td>@(report.IsIncome ? "" : "Gider")</td>
                            <td>@(report.IsIncome ? "" : $"{report.Amount:N2} ₺")</td>
                        </tr>
                    }
                </tbody>
                <tfoot >
                    <tr>
                        <td></td>
                        <td></td>
                        <td><b>T.Gelir</b></td>
                        <td><b>@($"{ProjectReports.Where(p => p.IsIncome).Sum(p => p.Amount):N2} ₺")</b></td>
                        <td><b>T.Gider</b></td>
                        <td><b>@($"{ProjectReports.Where(p => !p.IsIncome).Sum(p => p.Amount):N2} ₺")</b></td>
                    </tr>
                </tfoot>
            </table>

            <p class="fw-bold text-end">Toplam Kar/Zarar: @($"{(ProjectReports.Where(p => p.IsIncome).Sum(p => p.Amount) - ProjectReports.Where(p => !p.IsIncome).Sum(p => p.Amount)):N2} ₺")</p>
        </div>

    </div>
}
@if (!isProjectReportActive)
{
    <div class="card p-4">
        <div class="d-flex align-items-center gap-2">
            <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id" selected="@(customer.Id == selectedCustomer ? "selected" : null)">
                        @customer.CustomerName
                    </option>
                }
            </select>

            <select class="form-control" @bind="selectedProject">
                <option value="">Proje Seçin</option>
                @foreach (var project in Projects)
                {
                    <option value="@project.Id">@project.ProjectName</option>
                }
            </select>

            <input type="month" class="form-control" @bind="selectedDate" />

            <button class="btn btn-success" @onclick="GenerateChart">Raporla</button>
        </div>

        <div class="mt-4">
            <canvas id="myCanvas" width="600" height="600"></canvas>
        </div>
    </div>

}

@code {
    //public bool? isExpense = null;
    private bool isProjectReportActive = true;
    //private bool showMonthlyReport = false;
    private int selectedCustomer;
    private int selectedProject;
    private string selectedType = "Tümü";
    private DateTime selectedDate = DateTime.Today;
    private List<TblCustomer> Customers = new();
    private List<TblProject> Projects = new();
    private List<ProjectReport> ProjectReports = new();
    private decimal TotalAmount = 0;

    private string GetButtonClass(bool isProjectButton)
    {
        return isProjectButton == isProjectReportActive
            ? "btn btn-primary fw-bold shadow-sm px-4"  // Aktif buton
            : "btn btn-outline-primary px-4";          // Pasif buton
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerData();
    }

    private async Task OnCustomerChanged(ChangeEventArgs e)
    {
        var newValue = e.Value.ToString();
        selectedCustomer = int.TryParse(newValue, out var id) ? id : 0;
        await LoadProjectsData();
    }

    private void ShowProjectReport()
    {
        isProjectReportActive = true;
    }

    private void ShowMonthlyReport()
    {
        isProjectReportActive = false;
    }

    private async Task LoadCustomerData()
    {
        Customers = await _reportService.GetCustomersAsync();
    }

    private async Task LoadProjectsData()
    {
        Projects = await _reportService.GetProjectsAsync(selectedCustomer);
    }

    private async Task GetTotalAmount()
    {
        TotalAmount = await _reportService.GetTotalAmount(selectedProject);
    }

    private async void LoadProjectData()
    {
        ProjectReports = await _reportService.GetIncomeExpenseList(selectedProject);
        await GetTotalAmount();
        StateHasChanged();
    }

    // private void SetIncomeExpense(ChangeEventArgs e)
    // {
    //     var selectVal = e.Value as string;
    //     switch (selectVal)
    //     {
    //         case "0":
    //             isExpense = null;
    //             break;
    //         case "1":
    //             isExpense = true;
    //             break;
    //         case "2":
    //             isExpense = false;
    //             break;
    //         default:
    //             isExpense = true;
    //             break;
    //     }
    // }

    private async Task GenerateChart()
    {
        var doughnutReport = _reportService.GetDoughnutReport(selectedProject, selectedDate);
        decimal gelir = doughnutReport.Income;
        decimal gider = doughnutReport.Expense;

        var jsCode = $@"
            function drawDoughnutChart(gelir, gider) {{
                var canvas = document.getElementById('myCanvas');
                if (!canvas) {{
                    console.error('Canvas öğesi bulunamadı!');
                    return;
                }}

                var ctx = canvas.getContext('2d');
                console.log('Canvas bağlandı:', ctx);

                // Önce eski çizimi temizle
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                // Canvas boyutlarını artır (Daha büyük bir grafik için)
                canvas.width = 600;
                canvas.height = 600;

                var total = gelir + gider;
                var data = [gelir, gider];
                var colors = ['#4CAF50', '#F44336']; // Gelir - Gider renkleri
                var labels = ['Gelir', 'Gider'];

                var centerX = canvas.width / 2;
                var centerY = canvas.height / 2;
                var outerRadius = 180;  // Daha büyük doughnut çapı
                var innerRadius = 90;   // İç boşluğu büyüttük
                var startAngle = 0;

                console.log('Gelir:', gelir, 'Gider:', gider);

                for (var i = 0; i < data.length; i++) {{
                    var sliceAngle = (data[i] / total) * 2 * Math.PI;
                    var endAngle = startAngle + sliceAngle;

                    // Dilimi çiz
                    ctx.beginPath();
                    ctx.moveTo(centerX, centerY);
                    ctx.arc(centerX, centerY, outerRadius, startAngle, endAngle);
                    ctx.closePath();
                    ctx.fillStyle = colors[i];
                    ctx.fill();

                    // İç kısmı oluştur (Doughnut efekti)
                    ctx.beginPath();
                    ctx.moveTo(centerX, centerY);
                    ctx.arc(centerX, centerY, innerRadius, 0, 2 * Math.PI);
                    ctx.fillStyle = '#fff'; // Ortası beyaz olacak
                    ctx.fill();

                    // Yazıyı ekle (Dilimin içine değerleri yaz)
                    var midAngle = startAngle + sliceAngle / 2;
                    var textX = centerX + Math.cos(midAngle) * (outerRadius / 1.4);
                    var textY = centerY + Math.sin(midAngle) * (outerRadius / 1.4);

                    ctx.fillStyle = '#fff'; // Yazı rengi
                    ctx.font = 'bold 20px Arial'; // Daha büyük font
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(data[i].toLocaleString('tr-TR') + ' ₺', textX, textY);

                    startAngle = endAngle;
                }}

                // ✅ Gelir ve Gider için Açıklama (Legend) ekle
                var legendX = canvas.width - 180; // Sağ üst köşeye hizala
                var legendY = 50;

                for (var i = 0; i < labels.length; i++) {{
                    // Renk kutusunu çiz
                    ctx.fillStyle = colors[i];
                    ctx.fillRect(legendX, legendY + (i * 30), 20, 20);

                    // Açıklamayı yaz
                    ctx.fillStyle = '#000'; // Siyah yazı
                    ctx.font = 'bold 18px Arial';
                    ctx.textAlign = 'left';
                    ctx.fillText(labels[i], legendX + 30, legendY + 15 + (i * 30));
                }}
            }}

            // Örnek kullanım (Grafik başlat)
            drawDoughnutChart({gelir}, {gider});
";

        await JS.InvokeVoidAsync("eval", jsCode);


    }
}
