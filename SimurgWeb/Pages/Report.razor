@page "/report"
@using System.Globalization;
@inject NavigationManager Navigation
@using System.Globalization;
@using SimurgWeb.Services
@using SimurgWeb.SimurgModels
@inject IJSRuntime JS
@inject ReportService _reportService;

<h3 class="mb-4">Rapor Sayfası</h3>

<div class="d-flex gap-2 mb-3">
    <button class="@GetButtonClass(true)" @onclick="ShowProjectReport">Proje Bazlı</button>
    <button class="@GetButtonClass(false)" @onclick="ShowMonthlyReport">Ay Bazlı</button>
</div>

@if (isProjectReportActive)
{
    <div class="card p-4">
        <div class="d-flex align-items-center gap-2">
            <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id" selected="@(customer.Id == selectedCustomer ? "selected" : null)">
                        @customer.CustomerName
                    </option>
                }
            </select>

            <select class="form-control" @bind="selectedProject">
                <option value="">Proje Seçin</option>
                @foreach (var project in Projects)
                {
                    <option value="@project.Id">@project.ProjectName</option>
                }
            </select>

            <button class="btn btn-success" @onclick="LoadProjectData">Raporla</button>
        </div>

        <div class="mt-4">
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Müşteri</th>
                        <th>Proje</th>
                        <th>Gelir</th>
                        <th>Gelir Tutar</th>
                        <th>Gider</th>
                        <th>Gider Tutar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var report in ProjectReports)
                    {
                        <tr>
                            <td>@report.Customer</td>
                            <td>@report.Project</td>
                            <td>@(report.IsIncome ? "Gelir" : "")</td>
                            <td>@(report.IsIncome ? $"{report.Amount:N2} ₺" : "")</td>
                            <td>@(report.IsIncome ? "" : "Gider")</td>
                            <td>@(report.IsIncome ? "" : $"{report.Amount:N2} ₺")</td>
                        </tr>
                    }
                </tbody>
                <tfoot >
                    <tr>
                        <td></td>
                        <td></td>
                        <td><b>T.Gelir</b></td>
                        <td><b>@($"{ProjectReports.Where(p => p.IsIncome).Sum(p => p.Amount):N2} ₺")</b></td>
                        <td><b>T.Gider</b></td>
                        <td><b>@($"{ProjectReports.Where(p => !p.IsIncome).Sum(p => p.Amount):N2} ₺")</b></td>
                    </tr>
                </tfoot>
            </table>

            <p class="fw-bold text-end">Toplam Kar/Zarar: @($"{(ProjectReports.Where(p => p.IsIncome).Sum(p => p.Amount) - ProjectReports.Where(p => !p.IsIncome).Sum(p => p.Amount)):N2} ₺")</p>
        </div>

    </div>
}
@if (!isProjectReportActive)
{
    <div class="card p-4">
        <div class="d-flex align-items-center gap-2">
            <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id" selected="@(customer.Id == selectedCustomer ? "selected" : null)">
                        @customer.CustomerName
                    </option>
                }
            </select>

            <select class="form-control" @bind="selectedProject">
                <option value="">Proje Seçin</option>
                @foreach (var project in Projects)
                {
                    <option value="@project.Id">@project.ProjectName</option>
                }
            </select>

            <input type="month" class="form-control" @bind="selectedDate" />

            <button class="btn btn-success" @onclick="GenerateChart">Raporla</button>
        </div>

        <div class="mt-4">
            <canvas id="doughnutChart" width="400" height="400"></canvas>
        </div>
    </div>

}

@code {
    private bool isProjectReportActive = true;
    private int selectedCustomer;
    private int selectedProject;
    private string selectedType = "Tümü";
    private DateTime selectedDate = DateTime.Today;
    private List<TblCustomer> Customers = new();
    private List<TblProject> Projects = new();
    private List<ProjectReport> ProjectReports = new();
    private decimal TotalAmount = 0;

    private string GetButtonClass(bool isProjectButton)
    {
        return isProjectButton == isProjectReportActive
            ? "btn btn-primary fw-bold shadow-sm px-4"  // Aktif buton
            : "btn btn-outline-primary px-4";          // Pasif buton
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerData();
    }

    private async Task OnCustomerChanged(ChangeEventArgs e)
    {
        var newValue = e.Value.ToString();
        selectedCustomer = int.TryParse(newValue, out var id) ? id : 0;
        await LoadProjectsData();
    }

    private void ShowProjectReport()
    {
        isProjectReportActive = true;
    }

    private void ShowMonthlyReport()
    {
        isProjectReportActive = false;
    }

    private async Task LoadCustomerData()
    {
        Customers = await _reportService.GetCustomersAsync();
    }

    private async Task LoadProjectsData()
    {
        Projects = await _reportService.GetProjectsAsync(selectedCustomer);
    }

    private async Task GetTotalAmount()
    {
        TotalAmount = await _reportService.GetTotalAmount(selectedProject);
    }

    private async void LoadProjectData()
    {
        ProjectReports = await _reportService.GetIncomeExpenseList(selectedProject);
        await GetTotalAmount();
        StateHasChanged();
    }

    private async Task GenerateChart()
    {
        var doughnutReport = _reportService.GetDoughnutReport(selectedProject, selectedDate);
        decimal gelir = doughnutReport.Income;
        decimal gider = doughnutReport.Expense;

        var lblGelir = $"{gelir:N2} ₺";
        var lblGider = $"{gider:N2} ₺";

        var chartData = new
        {
            labels = new[] { $"Gelir: {lblGelir}", $"Gider: {lblGider}" },
            datasets = new[]
            {
                new
                {
                    data = new[] { gelir, gider },
                    backgroundColor = new[] { "#4CAF50", "#F44336" }
                }
            }
        };

        await JS.InvokeVoidAsync("drawDoughnutChart", "doughnutChart", chartData);
    }

}
