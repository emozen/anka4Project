@page "/report"
@inject NavigationManager Navigation
@using System.Globalization;
@using SimurgWeb.Services
@using SimurgWeb.SimurgModels
@inject IJSRuntime JS
@inject ReportService _reportService;

<h3 class="mb-4">Rapor Sayfası</h3>

<div class="d-flex gap-2 mb-3">
    <button class="@GetButtonClass(true)" @onclick="ShowProjectReport">Proje Bazlı</button>
    <button class="@GetButtonClass(false)" @onclick="ShowMonthlyReport">Ay Bazlı</button>
</div>

@if (isProjectReportActive)
{
    <div class="card p-4">
        <div class="d-flex align-items-center gap-2">
            @* <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id">@customer.CustomerName</option>
                }
            </select> *@

            <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id" selected="@(customer.Id == selectedCustomer ? "selected" : null)">
                        @customer.CustomerName
                    </option>
                }
            </select>

            <select class="form-control" @bind="selectedProject">
                <option value="">Proje Seçin</option>
                @foreach (var project in Projects)
                {
                    <option value="@project.Id">@project.ProjectName</option>
                }
            </select>

            <div class="form-check form-check-inline">
                <input type="radio" id="all" name="checkType" class="form-check-input" checked value="0" @onchange="SetIncomeExpense">
                <label for="checkType" class="form-check-label">Tümü</label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" id="income" name="checkType" class="form-check-input" value="1" @onchange="SetIncomeExpense">
                <label for="checkType" class="form-check-label">Gelir</label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" name="checkType" id="expense" class="form-check-input" value="2" @onchange="SetIncomeExpense">
                <label for="checkType" class="form-check-label">Gider</label>
            </div>

            <button class="btn btn-success" @onclick="LoadProjectData">Raporla</button>
        </div>

        <div class="mt-4">
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Müşteri</th>
                        <th>Proje</th>
                        <th>Gelir/Gider</th>
                        <th class="text-end">Tutar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var report in ProjectReports)
                    {
                        <tr>
                            <td>@report.Customer</td>
                            <td>@report.Project</td>
                            <td>@(report.IsIncome ? "Gelir" : "Gider")</td>
                            <td class="text-end">@report.Amount.ToString("C", CultureInfo.GetCultureInfo("tr-TR"))</td>
                        </tr>
                    }
                </tbody>
            </table>

            <p class="fw-bold text-end">Toplam: @TotalAmount.ToString("C", CultureInfo.GetCultureInfo("tr-TR"))</p>
        </div>

    </div>
}
@if (!isProjectReportActive)
{
    <div class="card p-4">
        <div class="d-flex align-items-center gap-2">
            <select class="form-control" @onchange="OnCustomerChanged">
                <option value="">Müşteri Seçin</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id" selected="@(customer.Id == selectedCustomer ? "selected" : null)">
                        @customer.CustomerName
                    </option>
                }
            </select>

            <select class="form-control" @bind="selectedProject">
                <option value="">Proje Seçin</option>
                @foreach (var project in Projects)
                {
                    <option value="@project.Id">@project.ProjectName</option>
                }
            </select>

            <input type="month" class="form-control" @bind="selectedDate" />

            <button class="btn btn-success" @onclick="GenerateChart">Raporla</button>
        </div>

        <div class="mt-4">
            <canvas id="doughnutChart" width="300" height="300"></canvas>
        </div>
    </div>

}

@code {
    public bool? isExpense = null;
    private bool isProjectReportActive = true;
    //private bool showMonthlyReport = false;
    private int selectedCustomer;
    private int selectedProject;
    private string selectedType = "Tümü";
    private DateTime selectedDate = DateTime.Today;
    private List<TblCustomer> Customers = new();
    private List<TblProject> Projects = new();
    private List<ProjectReport> ProjectReports = new();
    private decimal TotalAmount = 0;

    private string GetButtonClass(bool isProjectButton)
    {
        return isProjectButton == isProjectReportActive
            ? "btn btn-primary fw-bold shadow-sm px-4"  // Aktif buton
            : "btn btn-outline-primary px-4";          // Pasif buton
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerData();
    }

    private async Task OnCustomerChanged(ChangeEventArgs e)
    {
        var newValue = e.Value.ToString();
        selectedCustomer = int.TryParse(newValue, out var id) ? id : 0;
        await LoadProjectsData();
    }

    private void ShowProjectReport()
    {
        isProjectReportActive = true;
    }

    private void ShowMonthlyReport()
    {
        isProjectReportActive = false;
    }

    private async Task LoadCustomerData()
    {
        Customers = await _reportService.GetCustomersAsync();
    }

    private async Task LoadProjectsData()
    {
        Projects = await _reportService.GetProjectsAsync(selectedCustomer);
    }

    private async Task GetTotalAmount()
    {
        TotalAmount = await _reportService.GetTotalAmount(isExpense, selectedProject);
    }

    private async void LoadProjectData()
    {
        ProjectReports = await _reportService.GetIncomeExpenseList(isExpense, selectedProject);
        await GetTotalAmount();
        StateHasChanged();
    }

    private void SetIncomeExpense(ChangeEventArgs e)
    {
        var selectVal = e.Value as string;
        switch (selectVal)
        {
            case "0":
                isExpense = null;
                break;
            case "1":
                isExpense = true;
                break;
            case "2":
                isExpense = false;
                break;
            default:
                isExpense = true;
                break;
        }
    }

    private async Task GenerateChart()
    {
        var doughnutReport = _reportService.GetDoughnutReport(selectedProject, selectedDate);
        decimal gelir = doughnutReport.Income;
        decimal gider = doughnutReport.Expense;

        var jsCode = $@"
        var existingChart = Chart.getChart('doughnutChart');
        if (existingChart) {{
            existingChart.destroy();
        }}

        var ctx = document.getElementById('doughnutChart').getContext('2d');
        new Chart(ctx, {{
            type: 'doughnut',
            data: {{
                labels: ['Gelir', 'Gider'],
                datasets: [{{
                    data: [{gelir}, {gider}],
                    backgroundColor: ['#4CAF50', '#F44336']
                }}]
            }},
            options: {{
                responsive: false,
                maintainAspectRatio: false
            }}
        }});";

        await JS.InvokeVoidAsync("eval", jsCode);
    }
}



@* @attribute [Authorize]
@page "/report"
@using SimurgWeb.Services
@inject ReportService reportService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms

<div class="container my-4">
    <!-- Üst Kısım -->
    <div class="row align-items-center mb-4">
        <div class="col-md-4">
            <select class="form-select" aria-label="Proje Seçimi" @bind="selectedProject" @bind:after="OnProjectChanged">
                <option value="">Proje Seçin</option>
                @if (projectList != null && projectList.Any())
                {
                    @foreach (var project in projectList)
                    {
                        <option value="@project.Id">@project.ProjectName</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-4">
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="option1" name="options" checked value="0" @onchange="SetIncomeExpense">
                <label class="form-check-label" for="income">Tümü</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="option1" name="options" value="1" @onchange="SetIncomeExpense">
                <label class="form-check-label" for="income">Gelir</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="option2" name="options" value="2" @onchange="SetIncomeExpense">
                <label class="form-check-label" for="expense">Gider</label>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-primary" @onclick="GenerateReport">Raporla</button>
        </div>
    </div>

    <!-- Liste -->
    <div class="row">
        <div class="col-12">
            <ul class="list-group">
                @if (incomeExpenseItemList != null && incomeExpenseItemList.Any())
                {
                    @foreach (var item in incomeExpenseItemList)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@item.Description</span>
                            <span class="badge bg-primary rounded-pill">@($"{item.Amount:N2} ₺")</span>
                        </li>
                    }
                }
                else
                {
                    <li class="list-group-item">Liste boş.</li>
                }
            </ul>
        </div>
    </div>

    <!-- Toplam Fiyat -->
    <div class="row mt-4">
        <div class="col-12 text-end">
            <h5>Toplam Fiyat: <span id="totalPrice">@($"{totalAmount:N2} ₺")</span></h5>
        </div>
    </div>
</div>

@code {
    public List<ProjectList> projectList { get; set; } = new();
    public List<IncomeExpenseItems> incomeExpenseItemList { get; set; } = new();
    public int selectedProject { get; set; }
    public bool? isExpense = null;
    public decimal totalAmount = 0M;

    protected override async Task OnInitializedAsync()
    {
        projectList = await reportService.GetProjectList();
    }

    private async Task OnProjectChanged()
    {
        // Proje değiştiğinde dosya ve listeyi sıfırla
        incomeExpenseItemList.Clear();
        totalAmount = 0M;
    }

    private async Task SetIncomeExpense(ChangeEventArgs e)
    {
        var selectVal = e.Value as string;
        switch (selectVal)
        {
            case "0":
                isExpense = null;
                break;
            case "1":
                isExpense = true;
                break;
            case "2":
                isExpense = false;
                break;
            default:
                isExpense = true;
                break;
        }
    }

    private async Task GenerateReport()
    {
        // Raporu yükle
        incomeExpenseItemList = await reportService.GetIncomeExpenseList(isExpense, selectedProject);
        totalAmount = reportService.GetTotalAmount(incomeExpenseItemList);
    }
}
 *@