@attribute [Authorize]
@page "/customerList"

@using System.Collections.Generic
@using SimurgWeb.Services

@inject CustomerService customerService
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between align-items-center">
    <h3>Müşteri Listesi</h3>
    <button class="btn btn-success" @onclick="OpenNewModal">Yeni Müşteri Ekle</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Müşteri</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in customerItems)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.CustomerName</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="(() => OpenModal(item))">Düzenle</button>
                    <button class="btn btn-danger btn-sm ms-2" @onclick="(() => ConfirmDelete(item))">Sil</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal -->
<div class="modal fade @ModalClass" tabindex="-1" role="dialog" style="display: @(IsModalOpen ? "block" : "none");">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Müşteri Düzenle</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="customerName" class="form-label">Müşteri Adı</label>
                    <input type="text" class="form-control" id="customerName" @bind="SelectedCustomer.CustomerName" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Kapat</button>
                <button type="button" class="btn btn-success" @onclick="SaveChanges">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<div aria-live="polite" aria-atomic="true" class="position-relative toast-container">
    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3">
        @if (ShowToast)
        {
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">@ToastTitle</strong>
                    <button type="button" class="btn-close" @onclick="HideToast" aria-label="Close"></button>
                </div>
                <div class="toast-body" style="color: white; background-color: @ToastBackgroundColor;">
                    @ToastMessage
                </div>
            </div>
        }
    </div>
</div>

<style>
    .toast-container {
        z-index: 1055; /* Bootstrap modal için kullanılan değerlerin biraz üzerinde */
    }
</style>

@code {

    private List<CustomerItem> customerItems = new List<CustomerItem>();

    private CustomerItem SelectedCustomer = new CustomerItem();
    private bool IsModalOpen = false;
    private string ModalClass => IsModalOpen ? "show d-block" : "d-none";
    private CustomerItem? customerToDelete;

    protected override async Task OnInitializedAsync()
    {
        var token = await GetTokenAsync();
        customerItems = await customerService.GetCustomerList(token);
    }

    private void OpenModal(CustomerItem item)
    {
        SelectedCustomer = item;
        IsModalOpen = true;
    }

    private void OpenNewModal()
    {
        SelectedCustomer = new CustomerItem();
        IsModalOpen = true;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private async Task SaveChanges()
    {
        // Simulate save operation
        CloseModal();
        try
        {
            var token = await GetTokenAsync();
            var res = await customerService.AddOrUpdateCustomer(token, SelectedCustomer);
            var isNewCustomer = false;
            if (SelectedCustomer.Id == 0)
            {
                isNewCustomer = true;
            }
            customerItems = await customerService.GetCustomerList(token);
            if (res)
            {
                if (isNewCustomer)
                {
                    ShowSuccessToast("Müşteri eklendi");
                }
                else
                {
                    ShowSuccessToast("Güncelleme yapıldı");
                }                
            }
            else
            {
                ShowErrorToast("Bilgileri kontrol ediniz.");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Hata : " + ex.Message);
        }        
    }

    private async Task DeleteCustomer()
    {
        // Simulate save operation
        CloseModal();
        try
        {
            var token = await GetTokenAsync();
            var res = await customerService.DeleteCustomer(token, customerToDelete.Id);
            customerItems = await customerService.GetCustomerList(token);
            if (res)
            {
                ShowSuccessToast("Müşteri silindi");
            }
            else
            {
                ShowErrorToast("Bilgileri kontrol ediniz.");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Hata : " + ex.Message);
        }
    }

    private async Task ConfirmDelete(CustomerItem item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Müşteri '{item.CustomerName}' silinecek. Emin misiniz?");
        if (confirmed)
        {
            customerToDelete = item;
            await DeleteCustomer();
        }
    }

    private async Task<string> GetTokenAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
    }

    #region
    private bool ShowToast = false;
    private string ToastTitle = string.Empty;
    private string ToastMessage = string.Empty;
    private string ToastBackgroundColor = "green"; // Varsayılan başarılı için yeşil

    private void ShowSuccessToast(string message)
    {
        ToastTitle = "Başarılı!";
        ToastMessage = message;
        ToastBackgroundColor = "green";
        ShowToastNotification();
    }

    private void ShowErrorToast(string message)
    {
        ToastTitle = "Hata!";
        ToastMessage = message;
        ToastBackgroundColor = "red";
        ShowToastNotification();
    }

    private async void ShowToastNotification()
    {
        ShowToast = true;
        StateHasChanged(); // UI'yi yenile
        await Task.Delay(3000); // 3 saniye bekle
        HideToast(); // Toast'u gizle
    }

    private void HideToast()
    {
        ShowToast = false;
        StateHasChanged(); // UI'yi yenile
    }
    #endregion
}