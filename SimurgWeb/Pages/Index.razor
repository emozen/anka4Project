@attribute [Authorize]

@page "/"
@using System
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using SimurgWeb.Services
@using SimurgWeb.SimurgModels
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="card mb-4 mt-4" style="background-color: #f8f9fa; border: 1px solid #ddd; border-radius: 8px;">
    <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #ffffff; border-bottom: 1px solid #ddd;">
        <h5 class="mb-0" style="color: #495057;">
            <i class="fas fa-list me-1"></i> Proje Listesi
        </h5>
        <button class="btn btn-primary btn-sm" style="padding: 6px 12px; font-size: 14px;" @onclick="() => NavigateToNewProject(0)">
            <i class="fas fa-plus"></i> Yeni Proje Ekle
        </button>
    </div>

    <div class="card-body">
        @if (Projects == null || !Projects.Any())
        {
            <table class="table table-hover align-middle" style="width:100%; background-color: #ffffff;">
                <thead style="background-color: #f1f3f5; color: #495057;">
                    <tr>
                        <th style="width: 5%;">#</th>
                        <th>Proje Adı</th>
                        <th>Durumu</th>
                        <th style="width: 20%;">İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="4" class="text-center">Veri yükleniyor</td>
                    </tr>
                </tbody>
            </table>
        }
        else
        {
            <table id="project_list" class="table table-hover align-middle" style="width:100%; background-color: #ffffff;">
                <thead style="background-color: #f1f3f5; color: #495057;">
                    <tr>
                        <th style="width: 5%;">#</th>
                        <th>Proje Adı</th>
                        @* <th>Durumu</th> *@
                        <th>
                            Durumu
                            <select id="statusFilter" class="form-select form-select-sm" style="width: auto; display: inline-block;" @onchange="OnStatusFilterChange">
                                <option value="true">Devam Ediyor</option>
                                <option value="false">Tamamlandı</option>
                            </select>
                        </th>
                        <th style="display: none">Test</th>
                        <th style="width: 20%;">İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Projects == null || !Projects.Any())
                    {
                        <tr>
                            <td colspan="4" class="text-center">Veri bulunamadı</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var project in Projects)
                        {
                            <tr>
                                <td>@project.Id</td>
                                <td>@project.ProjectName</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(project.IsActive)" style="padding: 6px 12px; font-size: 14px;">
                                        <i class="@GetStatusIcon(project.IsActive) me-1"></i> @GetStatusName(project.IsActive)
                                    </span>
                                </td>
                                <td style="display: none">@GetStatusName(project.IsActive)</td>
                                <td>
                                    <button class="btn btn-info btn-sm me-1" style="padding: 6px 10px;" @onclick="() => NavigateToNewProject(project.Id)">
                                        <i class="fas fa-eye"></i> Detay
                                    </button>
                                    <button class="btn btn-info btn-sm me-1" style="padding: 6px 10px;" @onclick="() => DeleteProject(project.Id)">
                                        <i class="fas fa-eye"></i> Sil
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }

        <div class="d-flex justify-content-between align-items-center mt-3">
            <button class="btn btn-secondary btn-sm" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@IsPreviousDisabled">Önceki</button>
            <span>Sayfa @CurrentPage / @TotalPages</span>
            <button class="btn btn-secondary btn-sm" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@IsNextDisabled">Sonraki</button>
        </div>
        
    </div>
</div>

@code {
    private List<TblProject> Projects = new List<TblProject>();

    private string SelectedStatus = "true"; // Başlangıç değeri

    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalPages;
    private bool IsPreviousDisabled => CurrentPage == 1;
    private bool IsNextDisabled => CurrentPage == TotalPages;

    protected override async Task OnInitializedAsync()
    {
        // var token = await GetTokenAsync();
        // var _projects = ProjectService.GetProjects(token, true); // Devam Eden projeleri getir
        // Projects = _projects ?? new List<TblProject>();

        await LoadProjectsAsync();
    }

    private async Task OnStatusFilterChange(ChangeEventArgs e)
    {
        SelectedStatus = e.Value.ToString(); // Seçilen değeri al
        await LoadProjectsAsync(); // Tabloyu yeniden yükle
    }

    // private async Task LoadProjectsAsync()
    // {
    //     var token = await GetTokenAsync();
    //     var _projects = ProjectService.GetProjects(token, true, CurrentPage, PageSize);
    //     Projects = _projects ?? new List<TblProject>();

    //     // Toplam sayfa sayısını hesaplayabilirsiniz. TotalCount API'den de döndürülebilir.
    //     var totalCount = ProjectService.GetProjectsCount(token,true); // Örnekte direkt alınabilir.
    //     TotalPages = (int)Math.Ceiling((double)totalCount / PageSize);
    // }

    private async Task LoadProjectsAsync()
    {
        try
        {
            var token = await GetTokenAsync();

            // Seçilen duruma göre filtreleme
            bool? isActive = SelectedStatus switch
            {
                "true" => true,
                "false" => false,
                _ => null
            };

            var _projects = ProjectService.GetProjects(token, isActive, CurrentPage, PageSize);
            Projects = _projects ?? new List<TblProject>();

            // Toplam sayfa sayısını hesaplayabilirsiniz. TotalCount API'den de döndürülebilir.
            var totalCount = ProjectService.GetProjectsCount(token, isActive); // Örnekte direkt alınabilir.
            TotalPages = (int)Math.Ceiling((double)totalCount / PageSize);
        }
        catch
        {
            JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
            NavigationManager.NavigateTo("/login", true);
        }
    }

    private async Task ChangePage(int newPage)
    {
        CurrentPage = newPage;
        await LoadProjectsAsync();
    }

    private string GetStatusName(bool status) =>
    status ? "Devam Ediyor" : "Tamamlandı";

    private string GetStatusBadgeClass(bool status) =>
        status ? "bg-warning text-dark" : "bg-success";

    private string GetStatusIcon(bool status) =>
        status ? "fas fa-spinner fa-spin" : "fas fa-check-circle";


    private void NavigateToNewProject(int projectId)
    {
        NavigationManager.NavigateTo("/projectdetail/" + projectId);
    }

    private async Task DeleteProject(int projectId)
    {
        var token = await GetTokenAsync();
        var _projects = await ProjectService.ProjectDeleteAsync(token, projectId);
        await LoadProjectsAsync();
    }

    private async Task<string> GetTokenAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
    }

}